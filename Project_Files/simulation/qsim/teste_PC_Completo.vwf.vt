// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2022 20:27:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          teste_Program_conter_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module teste_Program_conter_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg halt;
reg [1:0] jump_prog;
reg modo_preemptivo;
reg [4:0] quantum;
reg reset_cont_preempcao;
reg reset_geral;
// wires                                               
wire [31:0] PC;
wire [31:0] PC_mais_1;
wire flag_faz_preempcao;
wire [31:0] salva_PC;

// assign statements (if any)                          
teste_Program_conter_module i1 (
// port map - connection between master ports and signals/registers   
	.PC(PC),
	.PC_mais_1(PC_mais_1),
	.clock(clock),
	.flag_faz_preempcao(flag_faz_preempcao),
	.halt(halt),
	.jump_prog(jump_prog),
	.modo_preemptivo(modo_preemptivo),
	.quantum(quantum),
	.reset_cont_preempcao(reset_cont_preempcao),
	.reset_geral(reset_geral),
	.salva_PC(salva_PC)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// halt
initial
begin
	halt = 1'b0;
end 
// jump_prog[ 1 ]
initial
begin
	jump_prog[1] = 1'b0;
	jump_prog[1] = #610000 1'b1;
end 
// jump_prog[ 0 ]
initial
begin
	jump_prog[0] = 1'b1;
	jump_prog[0] = #610000 1'b0;
end 

// modo_preemptivo
initial
begin
	modo_preemptivo = 1'b1;
end 

// reset_cont_preempcao
initial
begin
	reset_cont_preempcao = 1'b0;
end 

// reset_geral
initial
begin
	reset_geral = 1'b0;
end 
// quantum[ 4 ]
initial
begin
	quantum[4] = 1'b0;
end 
// quantum[ 3 ]
initial
begin
	quantum[3] = 1'b1;
end 
// quantum[ 2 ]
initial
begin
	quantum[2] = 1'b0;
end 
// quantum[ 1 ]
initial
begin
	quantum[1] = 1'b1;
end 
// quantum[ 0 ]
initial
begin
	quantum[0] = 1'b0;
end 
endmodule

