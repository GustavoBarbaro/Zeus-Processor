// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/17/2022 00:06:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Program_Counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Program_Counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] PC_in;
reg clock;
reg confirma_bt;
reg ler_da_entrada;
// wires                                               
wire [31:0] PC;
wire [31:0] PC_mais_1;

// assign statements (if any)                          
Program_Counter i1 (
// port map - connection between master ports and signals/registers   
	.PC(PC),
	.PC_in(PC_in),
	.PC_mais_1(PC_mais_1),
	.clock(clock),
	.confirma_bt(confirma_bt),
	.ler_da_entrada(ler_da_entrada)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	repeat(33)
	begin
		clock = 1'b0;
		clock = #15000 1'b1;
		# 15000;
	end
	clock = 1'b0;
end 
// PC_in[ 31 ]
initial
begin
	PC_in[31] = 1'b0;
end 
// PC_in[ 30 ]
initial
begin
	PC_in[30] = 1'b0;
end 
// PC_in[ 29 ]
initial
begin
	PC_in[29] = 1'b0;
end 
// PC_in[ 28 ]
initial
begin
	PC_in[28] = 1'b0;
end 
// PC_in[ 27 ]
initial
begin
	PC_in[27] = 1'b0;
end 
// PC_in[ 26 ]
initial
begin
	PC_in[26] = 1'b0;
end 
// PC_in[ 25 ]
initial
begin
	PC_in[25] = 1'b0;
end 
// PC_in[ 24 ]
initial
begin
	PC_in[24] = 1'b0;
end 
// PC_in[ 23 ]
initial
begin
	PC_in[23] = 1'b0;
end 
// PC_in[ 22 ]
initial
begin
	PC_in[22] = 1'b0;
end 
// PC_in[ 21 ]
initial
begin
	PC_in[21] = 1'b0;
end 
// PC_in[ 20 ]
initial
begin
	PC_in[20] = 1'b0;
end 
// PC_in[ 19 ]
initial
begin
	PC_in[19] = 1'b0;
end 
// PC_in[ 18 ]
initial
begin
	PC_in[18] = 1'b0;
end 
// PC_in[ 17 ]
initial
begin
	PC_in[17] = 1'b0;
end 
// PC_in[ 16 ]
initial
begin
	PC_in[16] = 1'b0;
end 
// PC_in[ 15 ]
initial
begin
	PC_in[15] = 1'b0;
end 
// PC_in[ 14 ]
initial
begin
	PC_in[14] = 1'b0;
end 
// PC_in[ 13 ]
initial
begin
	PC_in[13] = 1'b0;
end 
// PC_in[ 12 ]
initial
begin
	PC_in[12] = 1'b0;
end 
// PC_in[ 11 ]
initial
begin
	PC_in[11] = 1'b0;
end 
// PC_in[ 10 ]
initial
begin
	PC_in[10] = 1'b0;
end 
// PC_in[ 9 ]
initial
begin
	PC_in[9] = 1'b0;
end 
// PC_in[ 8 ]
initial
begin
	PC_in[8] = 1'b0;
end 
// PC_in[ 7 ]
initial
begin
	PC_in[7] = 1'b0;
end 
// PC_in[ 6 ]
initial
begin
	PC_in[6] = 1'b0;
end 
// PC_in[ 5 ]
initial
begin
	PC_in[5] = 1'b0;
	PC_in[5] = #960000 1'b1;
end 
// PC_in[ 4 ]
initial
begin
	PC_in[4] = 1'b0;
	PC_in[4] = #480000 1'b1;
	PC_in[4] = #480000 1'b0;
end 
// PC_in[ 3 ]
initial
begin
	repeat(2)
	begin
		PC_in[3] = 1'b0;
		PC_in[3] = #240000 1'b1;
		# 240000;
	end
	PC_in[3] = 1'b0;
end 
// PC_in[ 2 ]
initial
begin
	repeat(4)
	begin
		PC_in[2] = 1'b0;
		PC_in[2] = #120000 1'b1;
		# 120000;
	end
	PC_in[2] = 1'b0;
end 
// PC_in[ 1 ]
initial
begin
	repeat(8)
	begin
		PC_in[1] = 1'b0;
		PC_in[1] = #60000 1'b1;
		# 60000;
	end
	PC_in[1] = 1'b0;
end 
// PC_in[ 0 ]
initial
begin
	repeat(16)
	begin
		PC_in[0] = 1'b0;
		PC_in[0] = #30000 1'b1;
		# 30000;
	end
	PC_in[0] = 1'b0;
	PC_in[0] = #30000 1'b1;
end 

// confirma_bt
initial
begin
	confirma_bt = 1'b0;
	confirma_bt = #310000 1'b1;
	confirma_bt = #170000 1'b0;
end 

// ler_da_entrada
initial
begin
	ler_da_entrada = 1'b0;
	ler_da_entrada = #120000 1'b1;
	ler_da_entrada = #360000 1'b0;
end 
endmodule

