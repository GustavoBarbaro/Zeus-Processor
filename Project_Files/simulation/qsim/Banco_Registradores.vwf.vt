// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2020 03:12:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Banco_Registradores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Banco_Registradores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Reg_Write;
reg clock;
reg [4:0] endereco_escrita;
reg [4:0] endereco_leitura_1;
reg [4:0] endereco_leitura_2;
reg [31:0] escrever_dados;
// wires                                               
wire [31:0] Rd;
wire [31:0] Rs;
wire [31:0] Rt;

// assign statements (if any)                          
Banco_Registradores i1 (
// port map - connection between master ports and signals/registers   
	.Rd(Rd),
	.Reg_Write(Reg_Write),
	.Rs(Rs),
	.Rt(Rt),
	.clock(clock),
	.endereco_escrita(endereco_escrita),
	.endereco_leitura_1(endereco_leitura_1),
	.endereco_leitura_2(endereco_leitura_2),
	.escrever_dados(escrever_dados)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	repeat(6)
	begin
		clock = 1'b0;
		clock = #80000 1'b1;
		# 80000;
	end
	clock = 1'b0;
end 

// Reg_Write
initial
begin
	Reg_Write = 1'b1;
	Reg_Write = #430000 1'b0;
end 
// endereco_leitura_1[ 4 ]
initial
begin
	endereco_leitura_1[4] = 1'b0;
end 
// endereco_leitura_1[ 3 ]
initial
begin
	endereco_leitura_1[3] = 1'b0;
end 
// endereco_leitura_1[ 2 ]
initial
begin
	endereco_leitura_1[2] = 1'b0;
end 
// endereco_leitura_1[ 1 ]
initial
begin
	endereco_leitura_1[1] = 1'b0;
end 
// endereco_leitura_1[ 0 ]
initial
begin
	endereco_leitura_1[0] = 1'b0;
end 
// endereco_leitura_2[ 4 ]
initial
begin
	endereco_leitura_2[4] = 1'b0;
end 
// endereco_leitura_2[ 3 ]
initial
begin
	endereco_leitura_2[3] = 1'b0;
end 
// endereco_leitura_2[ 2 ]
initial
begin
	endereco_leitura_2[2] = 1'b0;
end 
// endereco_leitura_2[ 1 ]
initial
begin
	endereco_leitura_2[1] = 1'b0;
end 
// endereco_leitura_2[ 0 ]
initial
begin
	endereco_leitura_2[0] = 1'b1;
end 
// endereco_escrita[ 4 ]
initial
begin
	endereco_escrita[4] = 1'b0;
end 
// endereco_escrita[ 3 ]
initial
begin
	endereco_escrita[3] = 1'b0;
end 
// endereco_escrita[ 2 ]
initial
begin
	endereco_escrita[2] = 1'b0;
end 
// endereco_escrita[ 1 ]
initial
begin
	endereco_escrita[1] = 1'b0;
	endereco_escrita[1] = #320000 1'b1;
end 
// endereco_escrita[ 0 ]
initial
begin
	endereco_escrita[0] = 1'b0;
	endereco_escrita[0] = #160000 1'b1;
	endereco_escrita[0] = #160000 1'b0;
end 
// escrever_dados[ 31 ]
initial
begin
	escrever_dados[31] = 1'b0;
end 
// escrever_dados[ 30 ]
initial
begin
	escrever_dados[30] = 1'b0;
end 
// escrever_dados[ 29 ]
initial
begin
	escrever_dados[29] = 1'b0;
end 
// escrever_dados[ 28 ]
initial
begin
	escrever_dados[28] = 1'b0;
end 
// escrever_dados[ 27 ]
initial
begin
	escrever_dados[27] = 1'b0;
end 
// escrever_dados[ 26 ]
initial
begin
	escrever_dados[26] = 1'b0;
end 
// escrever_dados[ 25 ]
initial
begin
	escrever_dados[25] = 1'b0;
end 
// escrever_dados[ 24 ]
initial
begin
	escrever_dados[24] = 1'b0;
end 
// escrever_dados[ 23 ]
initial
begin
	escrever_dados[23] = 1'b0;
end 
// escrever_dados[ 22 ]
initial
begin
	escrever_dados[22] = 1'b0;
end 
// escrever_dados[ 21 ]
initial
begin
	escrever_dados[21] = 1'b0;
end 
// escrever_dados[ 20 ]
initial
begin
	escrever_dados[20] = 1'b0;
end 
// escrever_dados[ 19 ]
initial
begin
	escrever_dados[19] = 1'b0;
end 
// escrever_dados[ 18 ]
initial
begin
	escrever_dados[18] = 1'b0;
end 
// escrever_dados[ 17 ]
initial
begin
	escrever_dados[17] = 1'b0;
end 
// escrever_dados[ 16 ]
initial
begin
	escrever_dados[16] = 1'b0;
end 
// escrever_dados[ 15 ]
initial
begin
	escrever_dados[15] = 1'b0;
end 
// escrever_dados[ 14 ]
initial
begin
	escrever_dados[14] = 1'b0;
end 
// escrever_dados[ 13 ]
initial
begin
	escrever_dados[13] = 1'b0;
end 
// escrever_dados[ 12 ]
initial
begin
	escrever_dados[12] = 1'b0;
end 
// escrever_dados[ 11 ]
initial
begin
	escrever_dados[11] = 1'b0;
end 
// escrever_dados[ 10 ]
initial
begin
	escrever_dados[10] = 1'b0;
end 
// escrever_dados[ 9 ]
initial
begin
	escrever_dados[9] = 1'b0;
end 
// escrever_dados[ 8 ]
initial
begin
	escrever_dados[8] = 1'b1;
end 
// escrever_dados[ 7 ]
initial
begin
	escrever_dados[7] = 1'b1;
end 
// escrever_dados[ 6 ]
initial
begin
	escrever_dados[6] = 1'b1;
end 
// escrever_dados[ 5 ]
initial
begin
	escrever_dados[5] = 1'b0;
end 
// escrever_dados[ 4 ]
initial
begin
	escrever_dados[4] = 1'b0;
end 
// escrever_dados[ 3 ]
initial
begin
	escrever_dados[3] = 1'b0;
end 
// escrever_dados[ 2 ]
initial
begin
	escrever_dados[2] = 1'b0;
	escrever_dados[2] = #640000 1'b1;
end 
// escrever_dados[ 1 ]
initial
begin
	escrever_dados[1] = 1'b0;
	escrever_dados[1] = #320000 1'b1;
	escrever_dados[1] = #320000 1'b0;
	escrever_dados[1] = #320000 1'b1;
end 
// escrever_dados[ 0 ]
initial
begin
	repeat(3)
	begin
		escrever_dados[0] = 1'b0;
		escrever_dados[0] = #160000 1'b1;
		# 160000;
	end
	escrever_dados[0] = 1'b0;
end 
endmodule

