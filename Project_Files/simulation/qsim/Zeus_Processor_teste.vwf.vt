// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/20/2022 00:16:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Zeus_Processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Zeus_Processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_FPGA;
reg confirma_bt;
reg [15:0] entrada;
// wires                                               
wire ALUOp;
wire ALUSrc;
wire [31:0] ALu_out;
wire MemRead;
wire MemToReg;
wire MemWrite;
wire [31:0] PC;
wire PCSrc;
wire [31:0] Rd;
wire RegDst;
wire RegWrite;
wire [31:0] Rs;
wire [31:0] Rt;
wire confirma_entrada;
wire [31:0] escrever_dados;
wire [31:0] instrucao;
wire ler_da_entrada;
wire [31:0] mem_dados_out;
wire [31:0] novo_escrever_dados;
wire [31:0] print_dados;
wire print_out;
wire sys_clock;

// assign statements (if any)                          
Zeus_Processor i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.ALUSrc(ALUSrc),
	.ALu_out(ALu_out),
	.MemRead(MemRead),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.PC(PC),
	.PCSrc(PCSrc),
	.Rd(Rd),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.Rs(Rs),
	.Rt(Rt),
	.clock_FPGA(clock_FPGA),
	.confirma_bt(confirma_bt),
	.confirma_entrada(confirma_entrada),
	.entrada(entrada),
	.escrever_dados(escrever_dados),
	.instrucao(instrucao),
	.ler_da_entrada(ler_da_entrada),
	.mem_dados_out(mem_dados_out),
	.novo_escrever_dados(novo_escrever_dados),
	.print_dados(print_dados),
	.print_out(print_out),
	.sys_clock(sys_clock)
);
initial 
begin 
#1000000 $finish;
end 

// clock_FPGA
always
begin
	clock_FPGA = 1'b0;
	clock_FPGA = #5000 1'b1;
	#5000;
end 

// confirma_bt
initial
begin
	confirma_bt = 1'b0;
	confirma_bt = #300000 1'b1;
	confirma_bt = #30000 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b0;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b0;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b1;
	entrada[5] = #380000 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b1;
	entrada[3] = #380000 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b1;
	entrada[1] = #380000 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
end 
endmodule

